#PROTOTYPE                                                    |DOMAIN           |OP          |S1         |S2      |HOOK_AFTER                                                                                          |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#variants of open and close                                   |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
int open(const char* pathname, int flags, ...)                |FILE_OPEN_CLOSE  | OPEN       |real_path  | NULL   |if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(pathname, real_path); |
int open64(const char* pathname, int flags, ...)              |FILE_OPEN_CLOSE  | OPEN       |real_path  | NULL   |if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(pathname, real_path); |
FILE* fopen(const char* path, const char* mode)               |FILE_OPEN_CLOSE  | OPEN       |real_path  | mode   |int fd; if (result == NULL) {error_code=errno; fd=FD_NONE;} else {fd=fileno(result);} char real_path[PATH_MAX]=""; realpath(path, real_path); |
FILE* fopen64(const char* path, const char* mode)             |FILE_OPEN_CLOSE  | OPEN       |real_path  | mode   |int fd; if (result == NULL) {error_code=errno; fd=FD_NONE;} else {fd=fileno(result);} char real_path[PATH_MAX]=""; realpath(path, real_path); |
int creat(const char* pathname, mode_t mode)                  |FILE_OPEN_CLOSE  | OPEN       |real_path  | NULL   |if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(pathname, real_path); |
int creat64(const char* pathname, mode_t mode)                |FILE_OPEN_CLOSE  | OPEN       |real_path  | NULL   |if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(pathname, real_path); |
int fclose(FILE* fp)                                          |FILE_OPEN_CLOSE  | CLOSE      | NULL      | NULL   | if (result == -1) {error_code = errno;}                                                            |
int close(int fd)                                             |FILE_OPEN_CLOSE  | CLOSE      | NULL      | NULL   | if (result == -1) {error_code = errno;}                                                            |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#variants of read                                             |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
ssize_t read(int fd, void* buf, size_t count)                 |FILE_READ        | READ       | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t recv(int fd, void* buf, size_t count, int flags)      |FILE_READ        | READ       | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t pread(int fd, void* buf, size_t count, off_t offset)  |FILE_READ        | READ       | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t readv(int fd, const struct iovec* iov, int iovcnt)    |FILE_READ        | READ       | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t preadv(int fd, const struct iovec* iov, int iovcnt, off_t offset)|FILE_READ| READ    | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
size_t fread(void* ptr, size_t size, size_t nmemb, FILE* stream)|FILE_READ      | READ       | NULL      | NULL   | if (result < 0) error_code = errno;      int fd = fileno(stream); int count = size*nmemb;          |
# keep in mind, that for each variadic function (other than open) you must include its v... version in this file too (in addition to its standard version)                                                             |
int fscanf(FILE* stream, const char* format, ...)             |FILE_READ        | READ       | NULL      | NULL   | if (result == EOF) error_code = errno;   int fd = fileno(stream); int count = result;              |
int vfscanf(FILE* stream, const char* format, va_list ap)     |FILE_READ        | READ       | NULL      | NULL   | if (result == EOF) error_code = errno;   int fd = fileno(stream); int count = result;              |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#variants of write                                            |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
ssize_t write(int fd, const void* buf, size_t count)          |FILE_WRITE       | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno; check_for_http(FILE_WRITE, fd, buf, count, TIME_BEFORE(), TIME_AFTER());|
ssize_t send(int fd, const void* buf, size_t count, int flags)|FILE_WRITE       | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno; check_for_http(FILE_WRITE, fd, buf, count, TIME_BEFORE(), TIME_AFTER());|
ssize_t pwrite(int fd, const void* buf, size_t count, off_t offset)|FILE_WRITE  | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t writev(int fd, const struct iovec* iov, int iovcnt)   |FILE_WRITE       | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
ssize_t pwritev(int fd, const struct iovec* iov, int iovcnt, off_t offset)|FILE_WRITE | WRITE| NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
int fprintf(FILE* stream, const char* format, ...)            |FILE_WRITE       | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno;      int fd = fileno(stream); int count = result;              |
int vfprintf(FILE* stream, const char* format, va_list ap)    |FILE_WRITE       | WRITE      | NULL      | NULL   | if (result < 0) error_code = errno;      int fd = fileno(stream); int count = result;              |
size_t fwrite(const void* ptr, size_t size, size_t nmemb, FILE* stream)|FILE_WRITE|WRITE     | NULL      | NULL   | if (result < nmemb) error_code = errno;  int fd = fileno(stream); int count = size*nmemb;          |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#PROTOTYPE                                                    |DOMAIN           |OP          |S1         |S2      |HOOK_AFTER                                                                                          |
#variants of sync                                             |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
int fsync(int fd)                                             |SYNCS            | SYNC       | NULL      | NULL   | if (result == -1) {error_code = errno;}                                                            |
int fdatasync(int fd)                                         |SYNCS            | SYNC       | NULL      | NULL   | if (result == -1) {error_code = errno;}                                                            |
void sync()                                                   |SYNCS            | SYNC       | NULL      | NULL   |                                                                                                    |
int syncfs(int fd)                                            |SYNCS            | SYNC       | NULL      | NULL   | if (result == -1) {error_code = errno;}                                                            |
int fflush(FILE* fp)                                          |SYNCS            | FLUSH      | NULL      | NULL   | if (result != 0) {error_code = errno;} int fd = fileno(fp);                                        |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
# xattr routines                                              |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
int setxattr(const char* path, const char* name, const void* value, size_t size, int flags) | XATTRS | SETXATTR | real_path | name | int count = size; if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(path, real_path); |
int lsetxattr(const char* path, const char* name, const void* value, size_t size, int flags) | XATTRS | SETXATTR | real_path | name | int count = size; if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(path, real_path); |
int fsetxattr(int fd, const char* name, const void* value, size_t size, int flags) | XATTRS | SETXATTR | name | NULL | int count = size; if (result == -1) {error_code = errno;}                                       |
ssize_t getxattr(const char* path, const char* name, void* value, size_t size) |XATTRS | GETXATTR | real_path | name | int count = result; if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(path, real_path); |
ssize_t lgetxattr(const char* path, const char* name, void* value, size_t size) |XATTRS | GETXATTR | real_path | name | int count = result; if (result == -1) {error_code = errno;} char real_path[PATH_MAX]=""; realpath(path, real_path); |
ssize_t fgetxattr(int fd, const char* name, void* value, size_t size) |XATTRS | GETXATTR | name | NULL | int count = size; if (result == -1) {error_code = errno;}                                                     |
ssize_t listxattr(const char* path, char* list, size_t size)  | XATTRS          | LISTXATTR  | real_path | NULL  | if (result < 0) error_code = errno; char real_path[PATH_MAX]=""; realpath(path, real_path);         |
ssize_t llistxattr(const char* path, char* list, size_t size) | XATTRS          | LISTXATTR  | real_path | NULL  | if (result < 0) error_code = errno; char real_path[PATH_MAX]=""; realpath(path, real_path);         |
ssize_t flistxattr(int fd, char* list, size_t size)           | XATTRS          | LISTXATTR  | NULL      | NULL   | if (result < 0) error_code = errno;                                                                |
int removexattr(const char* path, const char* name)           | XATTRS          | REMOVEXATTR| real_path | NULL  | if (result < 0) error_code = errno; char real_path[PATH_MAX]=""; realpath(path, real_path);         |
int lremovexattr(const char* path, const char* name)          | XATTRS          | REMOVEXATTR| real_path | NULL  | if (result < 0) error_code = errno; char real_path[PATH_MAX]=""; realpath(path, real_path);         |
int fremovexattr(int fd, const char* name)                    | XATTRS          | REMOVEXATTR| NULL      | NULL  | if (result < 0) error_code = errno;                                                                 |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
int mount(const char* source, const char* target, const char* filesystemtype, unsigned long mountflags, const void* data) | FILE_SYSTEMS | MOUNT | source | target | if (result != 0) error_code = errno;              |
int umount(const char* target)                                | FILE_SYSTEMS    | UMOUNT     | target    | NULL   | if (result != 0) error_code = errno;                                                               |
int umount2(const char* target, int flags)                    | FILE_SYSTEMS    | UMOUNT     | target    | NULL   | if (result != 0) error_code = errno;                                                               |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#PROTOTYPE                                                    |DOMAIN           |OP          |S1         |S2      |HOOK_AFTER                                                                                          |
#directory functions                                          |                 |            |           |        |                                                                                                    |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
DIR* opendir(const char* name)                                | DIR_METADATA    | OPENDIR    | name      | NULL   | int fd = FD_NONE; if (!result) error_code = errno; else fd = dirfd(result);                        |
DIR* fdopendir(int fd)                                        | DIR_METADATA    | OPENDIR    | NULL      | NULL   | if (!result) error_code = errno;                                                                   |
int closedir(DIR* dirp)                                       | DIR_METADATA    | CLOSEDIR   | NULL      | NULL   | if (result) error_code = errno; int fd = dirfd(dirp);                                              |
struct dirent* readdir(DIR* dirp)                             | DIR_METADATA    | READDIR    | NULL      | NULL   | if (!result) error_code = errno; int fd = dirfd(dirp);                                             |
int readdir_r(DIR* dirp, struct dirent* entry, struct dirent** _res)| DIR_METADATA | READDIR | NULL      | NULL   | if (result) error_code = errno; int fd = dirfd(dirp);                                              |
void rewinddir(DIR* dirp)                                     | DIR_METADATA    | REWINDDIR  | NULL      | NULL   | int fd = dirfd(dirp);                                                                              |
void seekdir(DIR* dirp, long loc)                             | DIR_METADATA    | SEEKDIR    | NULL      | NULL   | int fd = dirfd(dirp);                                                                              |
long telldir(DIR* dirp)                                       | DIR_METADATA    | TELLDIR    | NULL      | NULL   | int fd = dirfd(dirp);                                                                              |
#-------------------------------------------------------------|-----------------|------------|-----------|--------|----------------------------------------------------------------------------------------------------|
#file metadata functions                                      |                 |            |           |        |                                                                                                    |
int fstat(int fd, struct stat* buf)                           | FILE_METADATA   | STAT       | NULL      | NULL   | if (result != 0) error_code = errno;                                                               |
int lstat(const char* path, struct stat* buf)                 | FILE_METADATA   | STAT       | path      | NULL   | if (result != 0) error_code = errno;                                                               |
int stat(const char* path, struct stat* buf)                  | FILE_METADATA   | STAT       | path      | NULL   | if (result != 0) error_code = errno;                                                               |
int access(const char* path, int amode)                       | FILE_METADATA   | ACCESS     | path      | NULL   | if (result != 0) error_code = errno;                                                               |
int faccessat(int fd, const char* path, int mode, int flag)   | FILE_METADATA   | ACCESS     | path      | NULL   | if (result != 0) error_code = errno;                                                               |
int chmod(const char* path, mode_t mode)                      | FILE_METADATA   | CHMOD      | path      | NULL   | if (result != 0) error_code = errno;                                                               |
int fchmod(int fd, mode_t mode)                               | FILE_METADATA   | CHMOD      | NULL      | NULL   | if (result != 0) error_code = errno;                                                               |
int fchmodat(int fd, const char* path, mode_t mode, int flag) | FILE_METADATA   | CHMOD      | path      | NULL   | if (result != 0) error_code = errno;                                                               |